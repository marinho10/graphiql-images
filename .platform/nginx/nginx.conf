# Elastic Beanstalk Nginx Configuration File

# http://nginx.org/en/docs/beginners_guide.html
# By default, the configuration file is named nginx.conf and placed in the directory
# /usr/local/nginx/conf, /etc/nginx, or /usr/local/etc/nginx
#
# nginx has one master process and several worker processes.
# The main purpose of the master process is to read and evaluate configuration, and maintain worker processes.
# Worker processes do actual processing of requests

# nginx consists of modules which are controlled by directives specified on this file.
# Directives are divided into simple directives and block directives.
# A simple directive consists of the name and parameters separated by spaces and ends with a semicolon (;).
# A block directive has the same structure as a simple directive, but instead of the semicolon it
# ends with a set of additional instructions surrounded by braces ({ and }).
# If a block directive can have other directives inside braces, it is called a context (e.g.: server, http)
# Directives placed in the configuration file outside of any contexts are considered to be in the main context.
# For a list of all the directives you can visit this page: http://nginx.org/en/docs/dirindex.html

# http://nginx.org/en/docs/ngx_core_module.html#user
# Defines user and group credentials used by worker processes
user nginx;

# http://nginx.org/en/docs/ngx_core_module.html#worker_processes
# The number of worker processes is defined in the configuration file and may be fixed for a given
# configuration or automatically adjusted to the number of available CPU cores
worker_processes auto;

# http://nginx.org/en/docs/ngx_core_module.html#error_log
# Configures logging. In this case we tell nginx to store its error logs in that path
error_log /var/log/nginx/error.log;

# http://nginx.org/en/docs/ngx_core_module.html#pid
# Defines a file that will store the process ID of the main process.
pid /var/run/nginx.pid;

# http://nginx.org/en/docs/ngx_core_module.html#worker_rlimit_nofile
# Changes the limit on the maximum number of open files (RLIMIT_NOFILE) for worker processes.
worker_rlimit_nofile 32136;

# http://nginx.org/en/docs/ngx_core_module.html#events
# Provides directives that affect connection processing
events {
  # http://nginx.org/en/docs/ngx_core_module.html#worker_connections
  # Sets the maximum number of simultaneous connections that can be opened by a worker process.
  # It should be kept in mind that this number includes all connections (e.g. connections with
  # proxied servers, among others), not only connections with clients. Another consideration is that
  # the actual number of simultaneous connections cannot exceed the current limit on the maximum
  # number of open files, which can be changed by worker_rlimit_nofile.
  worker_connections 1024;
}

# http://nginx.org/en/docs/http/ngx_http_core_module.html#http
# Provides the configuration file context in which the HTTP server directives are specified.
http {
  # include mime types defined on this file
  include /etc/nginx/mime.types;

  # http://nginx.org/en/docs/http/ngx_http_core_module.html#default_type
  # Defines the default MIME type of a response
  default_type application/octet-stream;

  # http://nginx.org/en/docs/http/ngx_http_log_module.html#access_log
  # Sets the path, format, and configuration for the log write
  access_log /var/log/nginx/access.log;

  # http://nginx.org/en/docs/http/ngx_http_log_module.html#log_format
  # Specifies the log format
  log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for"';

  # http://nginx.org/en/docs/http/ngx_http_core_module.html#sendfile
  # Enables or disables the use of sendfile()
  sendfile on;

  # http://nginx.org/en/docs/http/ngx_http_core_module.html#tcp_nopush
  # Enables or disables the use of the TCP_NOPUSH socket option on FreeBSD or the TCP_CORK socket
  # option on Linux. The options are enabled only when sendfile is used.
  tcp_nopush on;

  # http://nginx.org/en/docs/http/ngx_http_core_module.html#tcp_nodelay
  # Enables or disables the use of the TCP_NODELAY option.
  # The option is enabled when a connection is transitioned into the keep-alive state.
  # Additionally, it is enabled on SSL connections, for unbuffered proxying, and for WebSocket proxying.
  tcp_nodelay on;

  # http://nginx.org/en/docs/http/ngx_http_core_module.html#server_tokens
  # Enables or disables emitting nginx version on error pages and in the “Server” response header field.
  # The web server reveals excessive information in HTTP responses such as the type and version of
  # the web server. This type of information may assist an attacker in identifying possible
  # vulnerabilities, increasing the probability of success in compromising the infra-structure.
  # We turn that information off
  server_tokens off;

  # Include the generated locations
  include conf.d/*.conf;

  # http://nginx.org/en/docs/http/ngx_http_map_module.html
  # Creates a new variable whose value depends on values of one or more of the source variables
  # specified in the first parameter.
  # Parameters inside the map block specify a mapping between source and resulting values.
  # Source values are specified as strings or regular expressions (0.9.6).
  #
  # Source: https://grahamweldon.com/post/2019/06/nginx-maps-and-geo/
  # map <InputValue> <OutputValue> {
  #   default <DefaultReturnValue>;
  #   <Match1> <Match1ReturnValue>;
  #   <Match2> <Match2ReturnValue>;
  # }
  # in our case we set the $connection_upgrade to "upgrade"
  map $http_upgrade $connection_upgrade {
          default       "upgrade";
  }

  # http://nginx.org/en/docs/http/ngx_http_core_module.html#server
  # The configuration may include several server blocks distinguished by ports on which they listen
  # to and by server names. Once nginx decides which server processes a request, it tests the URI
  # specified in the request’s header against the parameters of the location directives
  # defined inside the server block.
  server {
    # this server will listen to port 80
    # The default_server parameter causes the server to become the default server for the specified
    # address:port pair.
    listen 80 default_server;

    # http://nginx.org/en/docs/http/ngx_http_gzip_module.html#gzip
    # Enables gzipping of responses.
    gzip on;

    # http://nginx.org/en/docs/http/ngx_http_gzip_module.html#gzip_comp_level
    # Sets a gzip compression level of a response. Acceptable values are in the range from 1 to 9.
    gzip_comp_level 4;

    # http://nginx.org/en/docs/http/ngx_http_gzip_module.html#gzip_types
    # Enables gzipping of responses for the specified MIME types in addition to “text/html”.
    # The special value “*” matches any MIME type (0.8.29).
    # Responses with the “text/html” type are always compressed.
    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;

    # http://nginx.org/en/docs/http/ngx_http_core_module.html#client_max_body_size
    # Sets the maximum allowed size of the client request body, specified in the “Content-Length”
    # request header field. If the size in a request exceeds the configured value,
    # the 413 (Request Entity Too Large) error is returned to the client.
    # Please be aware that browsers cannot correctly display this error.
    # Setting size to 0 disables checking of client request body size.
    # client_max_body_size 2000M;

    # http://nginx.org/en/docs/http/ngx_http_log_module.html#access_log
    # Sets the path, format, and configuration for the log write
    access_log /var/log/nginx/access.log main;

    # http://nginx.org/en/docs/http/ngx_http_core_module.html#location
    # Sets configuration depending on a request URI.
    # The matching is performed against a normalized URI
    # location blocks can be nested, with some exceptions mentioned below.
    # in this case we are catching all the request URI's
    location / {
      # set the redirect variable to 0 / false
      set $redirect 0;

      # if the request is not https we set the $redirect to 1 / true
      if ($http_x_forwarded_proto != "https") {
        set $redirect 1;
      }

      # catches the ELB healthchecker requests and returns immediately with 200
      # so that the EB health checker knows we are up \o/
      if ($http_user_agent ~* "^ELB-HealthChecker\/.*$") {
        access_log off;
        return 200;
      }

      # if we need to redirect (e.g.: http request) than we redirect the user to https
      if ($redirect = 1) {
        return 301 https://$host$request_uri;
      }

      # proxy the request to the docker instance and set all the necessary headers
      proxy_pass http://docker;

      # http://nginx.org/en/docs/http/ngx_http_proxy_module.html#proxy_http_version
      # Sets the HTTP protocol version for proxying. By default, version 1.0 is used.
      # Version 1.1 is recommended for use with keepalive connections and NTLM authentication.
      proxy_http_version 1.1;

      # Following lines set the connection headers
      # You can find a list of NGINX variables here: http://nginx.org/en/docs/varindex.html
      #
      # set the connection header to "upgrade". Check mapping defined above
      proxy_set_header    Connection             $connection_upgrade;

      proxy_set_header    Upgrade                $http_upgrade;

      # http://nginx.org/en/docs/http/ngx_http_core_module.html#var_host
      # $host = in this order of precedence: host name from the request line, or host name from
      # the “Host” request header field, or the server name matching a request
      proxy_set_header    Host                   $host;

      # $remote_addr = client address
      proxy_set_header    X-Real-IP              $remote_addr;
      proxy_set_header    X-Forwarded-For        $proxy_add_x_forwarded_for;

      # this header is necessary for the wss connection to work properly
      # UNCOMMENT THIS LINE IF YOU PLAN TO USE SOCKETS ON YOUR PROJECT
      # proxy_set_header    Origin                 '';
    }

    # Include the Elastic Beanstalk generated locations
    include conf.d/elasticbeanstalk/*.conf;
  }

  # v2.0
}
